diff --git a/content/browser/accessibility/browser_accessibility_cocoa.h b/content/browser/accessibility/browser_accessibility_cocoa.h
index 39d89e1..0f7da00 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.h
+++ b/content/browser/accessibility/browser_accessibility_cocoa.h
@@ -87,7 +87,9 @@
 @property(nonatomic, readonly) NSNumber* enabled;
 // Returns a text marker that points to the last character in the document that
 // can be selected with Voiceover.
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id endTextMarker;
+#endif
 @property(nonatomic, readonly) NSNumber* expanded;
 @property(nonatomic, readonly) NSNumber* focused;
 @property(nonatomic, readonly) NSNumber* grabbed;
@@ -123,12 +125,16 @@
 @property(nonatomic, readonly) NSArray* selectedChildren;
 @property(nonatomic, readonly) NSString* selectedText;
 @property(nonatomic, readonly) NSValue* selectedTextRange;
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id selectedTextMarkerRange;
+#endif
 @property(nonatomic, readonly) NSValue* size;
 @property(nonatomic, readonly) NSString* sortDirection;
 // Returns a text marker that points to the first character in the document that
 // can be selected with Voiceover.
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id startTextMarker;
+#endif
 // A string indicating the subrole of this object as far as accessibility
 // is concerned.
 @property(nonatomic, readonly) NSString* subrole;
diff --git a/content/browser/accessibility/browser_accessibility_cocoa.mm b/content/browser/accessibility/browser_accessibility_cocoa.mm
index 6c7d156..341ccac 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.mm
+++ b/content/browser/accessibility/browser_accessibility_cocoa.mm
@@ -104,6 +104,7 @@
 // VoiceOver uses -1 to mean "no limit" for AXResultsLimit.
 const int kAXResultsLimitNoLimit = -1;
 
+#ifndef MAS_BUILD
 extern "C" {
 
 // See http://openradar.appspot.com/9896491. This SPI has been tested on 10.5,
@@ -309,6 +310,7 @@ void AddMisspelledTextAttributes(
   AddMisspelledTextAttributes(text_only_objects, attributed_text);
   return [attributed_text attributedSubstringFromRange:range];
 }
+#endif
 
 // Returns an autoreleased copy of the AXNodeData's attribute.
 NSString* NSStringForStringAttribute(
@@ -544,7 +546,9 @@ + (void)initialize {
       {NSAccessibilityDisclosedRowsAttribute, @"disclosedRows"},
       {NSAccessibilityDropEffectsAttribute, @"dropEffects"},
       {NSAccessibilityEnabledAttribute, @"enabled"},
+#ifndef MAS_BUILD
       {NSAccessibilityEndTextMarkerAttribute, @"endTextMarker"},
+#endif
       {NSAccessibilityExpandedAttribute, @"expanded"},
       {NSAccessibilityFocusedAttribute, @"focused"},
       {NSAccessibilityGrabbedAttribute, @"grabbed"},
@@ -572,13 +576,17 @@ + (void)initialize {
       {NSAccessibilityRowsAttribute, @"rows"},
       // TODO(aboxhall): expose
       // NSAccessibilityServesAsTitleForUIElementsAttribute
+#ifndef MAS_BUILD
       {NSAccessibilityStartTextMarkerAttribute, @"startTextMarker"},
+#endif
       {NSAccessibilitySelectedAttribute, @"selected"},
       {NSAccessibilitySelectedChildrenAttribute, @"selectedChildren"},
       {NSAccessibilitySelectedTextAttribute, @"selectedText"},
       {NSAccessibilitySelectedTextRangeAttribute, @"selectedTextRange"},
+#ifndef MAS_BUILD
       {NSAccessibilitySelectedTextMarkerRangeAttribute,
        @"selectedTextMarkerRange"},
+#endif
       {NSAccessibilitySizeAttribute, @"size"},
       {NSAccessibilitySortDirectionAttribute, @"sortDirection"},
       {NSAccessibilitySubroleAttribute, @"subrole"},
@@ -617,8 +625,10 @@ - (instancetype)initWithObject:(BrowserAccessibility*)accessibility {
 }
 
 - (void)detach {
+#ifndef MAS_BUILD
   if (browserAccessibility_)
     NSAccessibilityUnregisterUniqueIdForUIElement(self);
+#endif
   browserAccessibility_ = nullptr;
 }
 
@@ -909,6 +919,7 @@ - (NSNumber*)enabled {
       !GetState(browserAccessibility_, ui::AX_STATE_DISABLED)];
 }
 
+#ifndef MAS_BUILD
 // Returns a text marker that points to the last character in the document that
 // can be selected with VoiceOver.
 - (id)endTextMarker {
@@ -937,6 +948,7 @@ - (id)endTextMarker {
                           last_text_object->GetText().length(),
                           ui::AX_TEXT_AFFINITY_DOWNSTREAM);
 }
+#endif
 
 - (NSNumber*)expanded {
   if (![self instanceActive])
@@ -1590,6 +1602,7 @@ - (NSValue*)selectedTextRange {
   return [NSValue valueWithRange:NSMakeRange(selStart, selLength)];
 }
 
+#ifndef MAS_BUILD
 - (id)selectedTextMarkerRange {
   if (![self instanceActive])
     return nil;
@@ -1620,6 +1633,7 @@ - (id)selectedTextMarkerRange {
   return CreateTextMarkerRange(*anchorObject, anchorOffset, anchorAffinity,
                                *focusObject, focusOffset, focusAffinity);
 }
+#endif
 
 - (NSValue*)size {
   if (![self instanceActive])
@@ -1652,6 +1666,7 @@ - (NSString*)sortDirection {
   return nil;
 }
 
+#ifndef MAS_BUILD
 // Returns a text marker that points to the first character in the document that
 // can be selected with VoiceOver.
 - (id)startTextMarker {
@@ -1678,6 +1693,7 @@ - (id)startTextMarker {
 
   return CreateTextMarker(*first_text_object, 0, ui::AX_TEXT_AFFINITY_UPSTREAM);
 }
+#endif
 
 // Returns a subrole based upon the role.
 - (NSString*) subrole {
@@ -1945,6 +1961,7 @@ - (NSAttributedString*)attributedValueForRange:(NSRange)range {
   if (![self instanceActive])
     return nil;
 
+#ifndef MAS_BUILD
   // We need to get the whole text because a spelling mistake might start or end
   // outside our range.
   NSString* value = base::SysUTF16ToNSString(browserAccessibility_->GetValue());
@@ -1954,6 +1971,7 @@ - (NSAttributedString*)attributedValueForRange:(NSRange)range {
       BrowserAccessibilityManager::FindTextOnlyObjectsInRange(
           *browserAccessibility_, *browserAccessibility_);
   AddMisspelledTextAttributes(textOnlyObjects, attributedValue);
+#endif
   return [attributedValue attributedSubstringFromRange:range];
 }
 
@@ -2074,6 +2092,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
     return nil;
   }
 
+#ifndef MAS_BUILD
   if ([attribute isEqualToString:@"AXUIElementForTextMarker"]) {
     BrowserAccessibility* object;
     int offset;
@@ -2256,6 +2275,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
     NSString* text = GetTextForTextMarkerRange(parameter);
     return [NSNumber numberWithInt:[text length]];
   }
+#endif
 
   if ([attribute isEqualToString:
       NSAccessibilityBoundsForRangeParameterizedAttribute]) {
@@ -2293,6 +2313,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
     return nil;
   }
 
+#ifndef MAS_BUILD
   if ([attribute isEqualToString:
            NSAccessibilityLineTextMarkerRangeForTextMarkerParameterizedAttribute]) {
     BrowserAccessibility* object;
@@ -2397,6 +2418,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
 
     return @(child->GetIndexInParent());
   }
+#endif
 
   return nil;
 }
diff --git a/content/browser/accessibility/browser_accessibility_manager_mac.mm b/content/browser/accessibility/browser_accessibility_manager_mac.mm
index 77ce72f..56bbece 100644
--- a/content/browser/accessibility/browser_accessibility_manager_mac.mm
+++ b/content/browser/accessibility/browser_accessibility_manager_mac.mm
@@ -83,8 +83,10 @@
     @"AXTextSelectionGranularity";
 NSString* const NSAccessibilityTextSelectionChangedFocus =
     @"AXTextSelectionChangedFocus";
+#ifndef MAS_BUILD
 NSString* const NSAccessibilitySelectedTextMarkerRangeAttribute =
     @"AXSelectedTextMarkerRange";
+#endif
 NSString* const NSAccessibilityTextChangeElement = @"AXTextChangeElement";
 NSString* const NSAccessibilityTextEditType = @"AXTextEditType";
 NSString* const NSAccessibilityTextChangeValue = @"AXTextChangeValue";
@@ -435,11 +437,13 @@
       [user_info setObject:native_focus_object
                     forKey:NSAccessibilityTextChangeElement];
 
+#ifndef MAS_BUILD
       id selected_text = [native_focus_object selectedTextMarkerRange];
       if (selected_text) {
         [user_info setObject:selected_text
                       forKey:NSAccessibilitySelectedTextMarkerRangeAttribute];
       }
+#endif
     }
   }
 
diff --git a/content/common/sandbox_mac.mm b/content/common/sandbox_mac.mm
index bd9eb73..c9370a6 100644
--- a/content/common/sandbox_mac.mm
+++ b/content/common/sandbox_mac.mm
@@ -41,10 +41,12 @@
 #include "ui/base/layout.h"
 #include "ui/gl/init/gl_factory.h"
 
+#ifndef MAS_BUILD
 extern "C" {
 void CGSSetDenyWindowServerConnections(bool);
 void CGSShutdownServerConnections();
 };
+#endif
 
 namespace content {
 namespace {
@@ -135,6 +137,7 @@ NOINLINE void FatalStringQuoteException(const std::string& str) {
 }
 
 bool SandboxCompiler::CompileAndApplyProfile(std::string* error) {
+#ifndef MAS_BUILD
   char* error_internal = nullptr;
   std::vector<const char*> params;
 
@@ -151,6 +154,7 @@ NOINLINE void FatalStringQuoteException(const std::string& str) {
     sandbox::Seatbelt::FreeError(error_internal);
     return false;
   }
+#endif
   return true;
 }
 
@@ -342,12 +346,14 @@ NOINLINE void FatalStringQuoteException(const std::string& str) {
   }
 
   if (sandbox_type == SANDBOX_TYPE_RENDERER) {
+#ifndef MAS_BUILD
     // Now disconnect from WindowServer, after all objects have been warmed up.
     // Shutting down the connection requires connecting to WindowServer,
     // so do this before actually engaging the sandbox. This may cause two log
     // messages to be printed to the system logger on certain OS versions.
     CGSSetDenyWindowServerConnections(true);
     CGSShutdownServerConnections();
+#endif
   }
 }
 
diff --git a/net/dns/dns_config_service_posix.cc b/net/dns/dns_config_service_posix.cc
index ba8a369..7c48676 100644
--- a/net/dns/dns_config_service_posix.cc
+++ b/net/dns/dns_config_service_posix.cc
@@ -208,6 +208,7 @@ class DnsConfigServicePosix::Watcher {
 
   bool Watch() {
     bool success = true;
+#ifndef MAS_BUILD
     if (!config_watcher_.Watch(base::Bind(&Watcher::OnConfigChanged,
                                           base::Unretained(this)))) {
       LOG(ERROR) << "DNS config watch failed to start.";
@@ -229,6 +230,7 @@ class DnsConfigServicePosix::Watcher {
                                 DNS_CONFIG_WATCH_MAX);
     }
 #endif  // !defined(OS_ANDROID) && !defined(OS_IOS)
+#endif
     return success;
   }
 
