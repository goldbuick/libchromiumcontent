#!/usr/bin/env python

import argparse
import contextlib
import errno
import os
import shutil
import subprocess
import sys
import tarfile
import tempfile
import urllib2

from lib.config import get_output_dir


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
SRC_DIR = os.path.join(SOURCE_ROOT, 'src')
CHROMIUMCONTENT_SOURCE_DIR = os.path.join(SOURCE_ROOT, 'chromiumcontent')
CHROMIUMCONTENT_DESTINATION_DIR = os.path.join(SRC_DIR, 'chromiumcontent')
COMPONENTS = ['static_library', 'shared_library', 'ffmpeg']
DEPOT_TOOLS = os.path.join(VENDOR_DIR, 'depot_tools')

NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja')
if sys.platform == 'win32':
  NINJA = '{0}.exe'.format(NINJA)

TARBALL_REPO = 'zcbenz/chromium-source-tarball'
TARBALL_URL = 'https://github.com/{0}/releases/download/{1}/chromium-{1}.tar.xz'


def main():
  args = parse_args()

  if not args.no_download:
    version = chromium_version()
    if not is_source_tarball_updated(version):
      download_source_tarball(version)
  else:
    print "Skipping Chromium Source Tarball Download"

  if sys.platform == 'linux2':
    install_sysroot()

  target_arch = args.target_arch
  return (apply_patches() or
          copy_chromiumcontent_files() or
          update_clang() or
          update_gn() or
          build_gn() or
          run_gn(target_arch, args.defines))


def parse_args():
  parser = argparse.ArgumentParser(description='Update build configuration')
  parser.add_argument('-t', '--target_arch', default='x64', help='x64 or ia32')
  parser.add_argument('-N', '--no-download-source-tarball',
                      default=False,
                      required=False,
                      action='store_true',
                      dest='no_download',
                      help='if you fetched chromium directly with depot_tools')
  parser.add_argument('--defines', default='',
                      help='The definetions passed to gyp')
  return parser.parse_args()


def chromium_version():
  with open(os.path.join(SOURCE_ROOT, 'VERSION')) as f:
    return f.readline().strip()


def is_source_tarball_updated(version):
  version_file = os.path.join(SRC_DIR, '.version')
  existing_version = ''
  try:
    with open(version_file, 'r') as f:
      existing_version = f.readline().strip()
  except IOError as e:
    if e.errno != errno.ENOENT:
      raise
    return False
  return existing_version == version


def download_source_tarball(version):
  rm_rf(SRC_DIR)

  dir_name = 'chromium-{0}'.format(version)
  tar_name = dir_name + '.tar'
  xz_name = tar_name + '.xz'
  url = TARBALL_URL.format(TARBALL_REPO, version)
  with open(xz_name, 'wb+') as t:
    with contextlib.closing(urllib2.urlopen(url)) as u:
      while True:
        chunk = u.read(1024*1024)
        if not len(chunk):
            break
        sys.stderr.write('.')
        sys.stderr.flush()
        t.write(chunk)

  sys.stderr.write('\nExtracting...\n')
  sys.stderr.flush()

  rm_f(tar_name)
  tar_xf(xz_name)
  os.rename(dir_name, SRC_DIR)
  os.remove(xz_name)

  version_file = os.path.join(SRC_DIR, '.version')
  with open(version_file, 'w+') as f:
    f.write(version)


def install_sysroot():
  for arch in ('arm', 'amd64', 'i386'):
    install = os.path.join(SRC_DIR, 'build', 'linux', 'sysroot_scripts',
                           'install-sysroot.py')
    subprocess.check_call([sys.executable, install, '--arch', arch])


def tar_xf(filename):
  subprocess.call([xz(), '-dqk', filename])
  tar_name = filename[:-3]
  tar = tarfile.open(tar_name)
  tar.extractall()
  tar.close()
  os.remove(tar_name)


def copy_chromiumcontent_files():
  try:
    os.makedirs(CHROMIUMCONTENT_DESTINATION_DIR)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise
  for dirpath, dirnames, filenames in os.walk(CHROMIUMCONTENT_SOURCE_DIR):
    for dirname in dirnames:
      mkdir_p(os.path.join(dirpath, dirname))
    for filename in filenames:
      source = os.path.join(dirpath, filename)
      relative = os.path.relpath(source, start=CHROMIUMCONTENT_SOURCE_DIR)
      destination = os.path.join(CHROMIUMCONTENT_DESTINATION_DIR, relative)
      if is_newer(destination, source):
        continue
      shutil.copy2(source, destination)


def apply_patches():
  return subprocess.call([sys.executable,
                          os.path.join(SOURCE_ROOT, 'script', 'apply-patches')])


def update_clang():
  if sys.platform not in ['linux2', 'darwin']:
    return
  update = os.path.join(SRC_DIR, 'tools', 'clang', 'scripts', 'update.py')
  return subprocess.call([sys.executable, update])


def update_gn():
  os.chdir(SRC_DIR)
  download = os.path.join(DEPOT_TOOLS, 'download_from_google_storage.py')
  if sys.platform in ['win32', 'cygwin']:
    platform = 'win32'
    key = 'win/gn.exe.sha1'
  elif sys.platform == 'darwin':
    platform = 'darwin'
    key = 'mac/gn.sha1'
  else:
    platform = 'linux*'
    key = 'linux64/gn.sha1'
  subprocess.call([sys.executable, download, '--no_resume',
                   '--platform={0}'.format(platform), '--no_auth', '--bucket',
                   'chromium-gn', '-s', 'buildtools/{0}'.format(key)])


def build_gn():
  os.chdir(SRC_DIR)
  # Generate target for building gn.
  if sys.platform in ['win32', 'cygwin']:
    gn = os.path.join(SRC_DIR, 'buildtools', 'win', 'gn.exe')
  elif sys.platform == 'linux2':
    gn = os.path.join(SRC_DIR, 'buildtools', 'linux64', 'gn')
  elif sys.platform == 'darwin':
    gn = os.path.join(SRC_DIR, 'buildtools', 'mac', 'gn')
  args = 'is_debug=false is_component_build=false is_official_build=true'
  output_dir = os.path.join('out', 'gn')
  subprocess.check_call([gn, 'gen', output_dir, "--args={0}".format(args)])
  # Build gn.
  subprocess.check_call([NINJA, '-C', output_dir, 'gn'])


def gn_env(target_arch):
  env = os.environ.copy()

  if sys.platform in ['win32', 'cygwin']:
    # Do not let Chromium download their own toolchains.
    env['DEPOT_TOOLS_WIN_TOOLCHAIN'] = '0'
    # Use VS 2015.
    # TODO(zcbenz): How can we do this in gn?
    env['GYP_MSVS_VERSION'] = '2015'
    # Use Windows 10 SDK.
    env['WINDOWSSDKDIR'] = 'C:\\Program Files (x86)\\Windows Kits\\10'
  elif sys.platform == 'linux2' and target_arch in ('arm', 'ia32'):
    # ARM build requires cross compilation.
    # TODO(zcbenz): How can we do this in gn?
    env['GYP_CROSSCOMPILE'] = '1'

  return env


def gn_args(target_arch, component, gyp_defines):
  args = []

  # Always do Release build.
  args.append('is_debug=false')

  # Whether to use component build.
  if component == 'shared_library':
    args.append('is_component_build=true')
  else:
    args.append('is_component_build=false is_official_build=true')

  # Media setting.
  if component == 'ffmpeg':
    args.append('ffmpeg_branding="Chromium" proprietary_codecs=false')
  else:
    args.append('ffmpeg_branding="Chrome" proprietary_codecs=true')

  # Build 32-bit or 64-bit.
  args.append('target_cpu="{0}"'.format(target_arch))

  # Build for Mac App Store:
  if os.environ.has_key('MAS_BUILD'):
    args.append('mac_mas_build=true')

  # Electron speicific build configurations:
  args += [
    # Disable NaCl.
    'enable_nacl=false',
    # Build ffmpeg as shared library.
    'is_component_ffmpeg=true',
    # Force V8 to expose symbols.
    'v8_enable_backtrace=true',
  ]
  if sys.platform in ['win32', 'cygwin']:
    args += [
      # On Chrome 41 this is disabled on Windows.
      'v8_use_external_startup_data=true',
    ]
  elif sys.platform == 'linux2':
    args += [
      # Make Linux build contain debug symbols, this flag will add '-g' to
      # cflags.
      'symbol_level=2',
    ]

  return ' '.join(args) + gyp_defines


def run_gn(target_arch, defines):
  os.chdir(SRC_DIR)
  if sys.platform in ['win32', 'cygwin']:
    gn = os.path.join(SRC_DIR, 'out', 'gn', 'gn.exe')
  else:
    gn = os.path.join(SRC_DIR, 'out', 'gn', 'gn')
  for component in COMPONENTS:
    args = gn_args(target_arch, component, defines)
    output_dir = get_output_dir(target_arch, component)
    subprocess.call([gn, 'gen', output_dir, "--args={0}".format(args)],
                    env=gn_env(target_arch))


def xz():
  if sys.platform in ['win32', 'cygwin']:
    return os.path.join(VENDOR_DIR, 'xz', 'win32', 'xz.exe')
  elif sys.platform == 'darwin':
    return os.path.join(VENDOR_DIR, 'xz', 'darwin', 'bin', 'xz')
  else:
    return 'xz'


def is_newer(destination, source):
  return os.path.exists(destination) and \
    os.path.getmtime(destination) > os.path.getmtime(source)


def rm_f(path):
  try:
    os.remove(path)
  except OSError as e:
    if e.errno != errno.ENOENT:
      raise


def rm_rf(path):
  try:
    shutil.rmtree(path)
  except OSError as e:
    if e.errno != errno.ENOENT:
      raise


def mkdir_p(path):
  try:
    os.makedirs(path)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise


if __name__ == '__main__':
  import sys
  sys.exit(main())
